./ ADD NAME=INSTJCL
//ASMG#0   JOB  'C0018R.V.PETERSEN,TIME=5,CARDS=1500,PAGES=50',
//             MSGLEVEL=(1,1)
//*
//*                THIS JOB PUNCHES AND PRINTS THE ASMG.JCL DATASET.
//*                THAT DATASET CONTAINS SAMPLE JOBS FOR PUTTING
//*                ASMG INTO YOUR SYSTEM, TESTING IT, AND MODIFYING
//*                IT IF NECESSARY.
//*
//         EXEC PGM=IEBUPDTE,REGION=40K
//SYSPRINT DD   SYSOUT=A
//SYSUT1   DD   UNIT=2400,VOLUME=(PRIVATE,SER=ASMG27),DISP=OLD,
//             DSNAME=ASMG.JCL
//SYSUT2   DD   SYSOUT=B
//SYSIN    DD   *
><       REPRO     LIST=ALL
><       ENDUP
/*





//ASMG#1   JOB  'C0018R.V.PETERSEN,TIME=5',MSGLEVEL=(1,1)
//*
//*                THIS JOB MOVES ASMG.LOADMODS TO THE DISK UNDER
//*                THE SAME NAME AND CATALOGS IT.
//*
//         EXEC PGM=IEHMOVE,REGION=100K
//SYSPRINT DD   SYSOUT=A
//SYSUT1   DD   UNIT=SYSDA,VOLUME=SER=222222,DISP=OLD
//DDASMG27 DD   UNIT=2400,VOLUME=(PRIVATE,SER=ASMG27),DISP=OLD
//DD333333 DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=(NEW,KEEP),
//             DSN=ASMG.LOADMODS,SPACE=(7294,(40,,3)),
//             DCB=(RECFM=U,BLKSIZE=7294)
//SYSIN    DD   *
         COPY      PDS=ASMG.LOADMODS,FROM=2400=(ASMG27,2),             X
               TO=2314=333333
/*
//         EXEC PGM=IEHPROGM,REGION=44K
//SYSPRINT DD   SYSOUT=A
//DD333333 DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=OLD
//SYSIN    DD   *
         CATLG     DSNAME=ASMG.LOADMODS,VOL=2314=333333
/*





//ASMG#2   JOB  'C0018R.V.PETERSEN,TIME=5',MSGLEVEL=(1,1)
//*
//*                THIS JOB MOVES ASMG.SOURCE, ASMG.OBJMODS,
//*                ASMG.MACROLIB, ASMG.LKEDIN AND ASMG27A.UPDATE
//*                TO DISK AND CATALOGUES THEM.
//*
//         EXEC PGM=IEHMOVE,REGION=100K
//SYSPRINT DD   SYSOUT=A
//SYSUT1   DD   UNIT=SYSDA,VOLUME=SER=777777,DISP=OLD
//DDASMG27 DD   UNIT=2400,VOLUME=(PRIVATE,RETAIN,SER=ASMG27),DISP=OLD
//DD30     DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=(NEW,KEEP),
//             DSN=ASMG.SOURCE,SPACE=(3360,(1200,,3)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3360)
//DD31     DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=(NEW,KEEP),
//             DSN=ASMG.OBJMODS,SPACE=(3200,(200,,3)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)
//DD32     DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=(NEW,KEEP),
//             DSN=ASMG.MACROLIB,SPACE=(3360,(100,,5)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3360)
//DD33     DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=(NEW,KEEP),
//             DSN=ASMG.LKEDIN,SPACE=(80,(200,,3)),
//             DCB=(RECFM=F,LRECL=80,BLKSIZE=80)
//DD34     DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=(NEW,KEEP),
//             DSN=ASMG27A.UPDATE,SPACE=(3360,(60,,3)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3360)
//SYSIN    DD   *
         COPY  PDS=ASMG.SOURCE,FROM=2400=(ASMG27,5),TO=2314=333333
         COPY  PDS=ASMG.OBJMODS,FROM=2400=(ASMG27,6),TO=2314=333333
         COPY  PDS=ASMG.MACROLIB,FROM=2400=(ASMG27,7),TO=2314=333333
         COPY  PDS=ASMG.LKEDIN,FROM=2400=(ASMG27,8),TO=2314=333333
         COPY  PDS=ASMG27A.UPDATE,FROM=2400=(ASMG27,9),TO=2314=333333
/*
//         EXEC PGM=IEHPROGM,REGION=44K
//SYSPRINT DD   SYSOUT=A
//DD333333 DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=OLD
//SYSIN    DD   *
         CATLG     DSNAME=ASMG.SOURCE,VOL=2314=333333
         CATLG     DSNAME=ASMG.OBJMODS,VOL=2314=333333
         CATLG     DSNAME=ASMG.MACROLIB,VOL=2314=333333
         CATLG     DSNAME=ASMG.LKEDIN,VOL=2314=333333
         CATLG     DSNAME=ASMG27A.UPDATE,VOL=2314=333333
/*





//ASMG#3  JOB   'C0018R.V.PETERSEN,TIME=2',MSGLEVEL=(1,1)
//*
//*                THIS JOB TESTS THE BATCH-EXECUTE FEATURES.
//*                NOTE THAT THE MACROS WOULD NORMALLY BE IN A
//*                SYSLIB DATASET.
//*
//JOBLIB   DD   DSN=ASMG.LOADMODS,DISP=SHR
//ASM      EXEC PGM=ASMGASM,PARM='B,EXEC,NOLO',REGION=120K
//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(3500,(400,50))
//SYSUT2   DD   UNIT=SYSDA,SPACE=(3500,(400,50))
//SYSUT3   DD   UNIT=(SYSDA,SEP=(SYSUT2,SYSUT1,SYSLIB)),
//             SPACE=(3500,(400,50))
//SYSPRINT DD   SYSOUT=A,DCB=LRECL=133   ***LRECL CHANGED FOR EXECUTE
//SYSPUNCH DD   SYSOUT=B
//SYSTERM  DD   SYSOUT=A
//SYSLIN   DD   DSN=&LOADSET,UNIT=SYSSQ,SPACE=(3200,(10,5)),
//             DISP=(MOD,PASS)
//ASM.SYSIN DD  *
*JOB
         BR        14
*THIS WILL WORK WITH A GENERATED $JOB CARD
         END
$JOB
         DC        H'0'
         BR        14
*        THIS WILL NOT
         END
$JOB   ASMG   C0018R.V.PETERSEN
*        THIS ONE SHOULD ASSEMBLE AND EXECUTE SUCCESSFULLY
         PRINT     ON
         MACRO
&LABEL   COMMENCE  &EOF=
&LABEL   STM       14,12,12(13) .      SAVE CALLER'S REGISTERS
         BALR      12,0 .              ESTABLISH THE BASE
         USING     *,12 .              AND TELL THE ASSEMBLER
         LR        15,13 .             REMEMBER CALLER'S SAVE AREA
         LA        13,ZZZZSAVE .       WHAT IS MY SAVE AREA
         ST        13,8(15) .          TELL THE CALLER
         ST        15,ZZZZSAVE+4 .     SAVE CALLER'S SAVE AREA
         ST        1,ZZZZSAVE .        SAVE POINTER TO ASMG DCB LIST
         AIF       (K'&EOF EQ 0).NOEOF WAS EOF SPECIFIED .Q
         L         1,16(0,1) .         POINT TO SYSIN DCB
         MVC       33(3,1),=AL3(&EOF) .MODIFY THE EODAD
.NOEOF   ANOP
         LA        1,50 .              50 LINES PER PAGE FOR USER
         ST        1,ZZZLINES .        AND REMEMBER IT
         B         ZZAROUND .          BRANCH AROUND DATA
ZZZDUMMY DS        D .                 DUMMY CONVERT AREA
ZZZZTEMP DS        4F .                TEMPORARY SAVE AREA
ZZZZSAVE DS        18F .               MY SAVE AREA
ZZZLINES DS        F .                 LINES PER USER OUTPUT PAGE
ZZZINPUT DS        CL80 .              CARD INPUT AREA
ZZOUTPUT DC        CL133' ' .          PRINTER OUTPUT AREA
ZZAROUND DS        0H
         MEND
         MACRO
&LABEL   RD        &INPUT,&NUMBER=8,&EOF=
         LCLA      &TNUM
&TNUM    SETA      &NUMBER
         AIF       (&TNUM GE 1).NEXT1
         MNOTE     0,'NUMBER PARAMETER WAS TOO SMALL'
&TNUM    SETA      1
.NEXT1   AIF       (&TNUM LE 8).NEXT2
         MNOTE     0,'NUMBER PARAMETER WAS TOO BIG'
&TNUM    SETA      8
.NEXT2   ANOP
&LABEL   STM       0,3,ZZZZTEMP .      SAVE WORK REGISTERS
         L         1,ZZZZSAVE .        POINTER TO ASMG DCB LIST
         L         1,16(,1) .          POINT TO SYSIN DCB
         AIF       (K'&EOF EQ 0).NOEOF
         MVC       ZZZDUMMY(3),33(1) . SAVE GLOBAL EODAD EXIT
         LR        2,1 .               REMEMBER DCB ADDR OVER GET
         MVC       33(3,1),=AL3(&EOF)  MODIFY THE SYSIN EODAD
.NOEOF   ANOP
         LA        0,ZZZINPUT .        POINT TO MY INPUT AREA
         L         15,48(,1) .         LOAD GET ADDRESS FROM DCB
         BALR      14,15 .             DO THE GET
         AIF       (K'&EOF EQ 0).NOEOD WAS EOF SPECIFIED
         MVC       33(3,2),ZZZDUMMY .  RESTORE EODAD ADDRESS
.NOEOD   ANOP
         SR        3,3 .               ZERO A NUMBER COUNTER
         LA        14,ZZZINPUT .       POINT TO CARD IMAGE
         LA        15,&INPUT .         POINT TO TARGET
.LOOP1   NI        9(14),X'0F' .       REMOVE THE SIGN
         CLI       0(14),C'-' .        IS NUMBER NEGATIVE
         BNE       *+8 .LOOP2          NO
         OI        9(14),X'D0' .       MAKE IT NEGATIVE
.LOOP2   OI        9(14),X'C0' .       MAKE IT POSITIVE
         PACK      ZZZDUMMY,1(9,14) .  CONVERT TO DECIMAL
         CVB       2,ZZZDUMMY .        CONVERT TO BINARY
         ST        2,0(,15) .          ENTER NUMBER IN TARGET
         LA        15,4(,15) .         INCREMENT TARGET
         LA        14,10(,14) .        INCREMENT CARD FIELD
         LA        3,1(,3) .           INCREMENT NUMBER COUNT
         LA        2,&TNUM .           GET TOTAL NUMBER TO BE CONVERTED
         CR        3,2 .               ARE WE DONE .Q
         BNE       *-52 .LOOP1         NO, DO NEXT NUMBER
         LM        0,3,ZZZZTEMP .      RESTORE WORK REGISTERS
         MEND
         MACRO
&LABEL   PRNT      &OUTPUT,&NUMBER=8
         LCLA      &TNUM
&TNUM    SETA      &NUMBER
         AIF       (&TNUM GE 1).NEXT1
         MNOTE     0,'NUMBER PARAMETER WAS TOO SMALL'
&TNUM    SETA      1
.NEXT1   AIF       (&TNUM LE 10).NEXT2
         MNOTE     0,'NUMBER PARAMETER WAS TOO BIG'
&TNUM    SETA      10
.NEXT2   ANOP
&LABEL   STM       0,3,ZZZZTEMP .      SAVE FOUR WORK REGISTERS
         LA        14,&OUTPUT .        GET ADDRESS OF SOURCE
         MVI       ZZOUTPUT,C' ' .     BLANK OUTPUT FIELD
         MVC       ZZOUTPUT+1(132),ZZOUTPUT THE WHOLE FIELD
         LA        15,ZZOUTPUT .       POINTER TO OUTPUT FIELD
         SR        3,3 .               ZERO A NUMBER COUNT
.LOOP1   L         2,0(,14) .          GET A NUMBER FOR OUTPUT
         LTR       2,2 .               TEST ITS SIGN
         BNL       *+12 .LOOP2         IS IT POSITIVE
         MVI       2(15),C'-' .        NO IT IS NEGATIVE
         B         *+8 .LOOP3          BRANCH AROUND
.LOOP2   MVI       2(15),C'+' .        IT IS POSITIVE
.LOOP3   CVD       2,ZZZDUMMY .        CONVERT TO DECIMAL
         UNPK      3(10,15),ZZZDUMMY . CONVERT IT TO ZONED
         OI        12(15),X'F0' .      SET ZONE SIGN POSITIVE
         LA        14,4(,14) .         INCREMENT SOURCE FIELD
         LA        15,12(,15) .        INCREMENT TARGET FIELD
         LA        3,1(,3) .           INCREMENT NUMBER OF NUMBERS
         LA        2,&TNUM .           GET TOTAL NUMBER OF NUMBERS
         CR        3,2 .               ARE WE DONE .Q
         BNE       *-54 .LOOP1         NO, DO NEXT NUMBER
         L         3,ZZZLINES .        GET LINES LEFT ON PAGE
         BCT       3,*+12 .LOOP4       DECREMENT AND TEST
         LA        3,50 .              RESTORE PAGE SIZE
         MVI       ZZOUTPUT,C'1'       SKIP TO NEW PAGE
.LOOP4   ST        3,ZZZLINES .        UPDATE LINES LEFT COUNT
         L         1,ZZZZSAVE .        POINT TO ASMG DCB LIST
         L         1,20(,1) .          GET SYSPRINT DCB ADDRESS
         LA        0,ZZOUTPUT .        POINT TO OUTPUT LINE
         L         15,48(,1) .         GET PUT ADDRESS FROM DCB
         BALR      14,15 .             DO THE PUT
         LM        0,3,ZZZZTEMP .      RESTORE WORK REGISTERS
         MEND
         MACRO
&LABEL   FINISH    &RC=0
&LABEL   L         13,ZZZZSAVE+4 .     POINT TO CALLER'S SAVE AREA
         LM        14,12,12(13) .      RESTORE CALLER'S REGISTERS
         LA        15,&RC .            SET RETURN CODE
         BR        14 .                RETURN TO CALLER
         MEND
         PRINT     ON,NOGEN
START    COMMENCE  EOF=ENDFILE
LOOP     EQU       *
         RD        INPUT
         PRNT      INPUT
         B         LOOP
ENDFILE  FINISH
INPUT    DC        10F'0'
         END       START
+123456789-987654321+000000000-111111111+222222222+333333333+444444444+5
+123456789
+987654321
H012345678
+876543210
$JOB     ASMG      C0032D.G.POTTER
*        THIS ONE SHOULD GET AN INVALID OPCODE
         PRINT     OFF
         MACRO
&LABEL   COMMENCE  &EOF=
&LABEL   STM       14,12,12(13) .      SAVE CALLER'S REGISTERS
         BALR      12,0 .              ESTABLISH THE BASE
         USING     *,12 .              AND TELL THE ASSEMBLER
         LR        15,13 .             REMEMBER CALLER'S SAVE AREA
         LA        13,ZZZZSAVE .       WHAT IS MY SAVE AREA
         ST        13,8(15) .          TELL THE CALLER
         ST        15,ZZZZSAVE+4 .     SAVE CALLER'S SAVE AREA
         ST        1,ZZZZSAVE .        SAVE POINTER TO ASMG DCB LIST
         AIF       (K'&EOF EQ 0).NOEOF WAS EOF SPECIFIED .Q
         L         1,16(0,1) .         POINT TO SYSIN DCB
         MVC       33(3,1),=AL3(&EOF) .MODIFY THE EODAD
.NOEOF   ANOP
         LA        1,50 .              50 LINES PER PAGE FOR USER
         ST        1,ZZZLINES .        AND REMEMBER IT
         B         ZZAROUND .          BRANCH AROUND DATA
ZZZDUMMY DS        D .                 DUMMY CONVERT AREA
ZZZZTEMP DS        4F .                TEMPORARY SAVE AREA
ZZZZSAVE DS        18F .               MY SAVE AREA
ZZZLINES DS        F .                 LINES PER USER OUTPUT PAGE
ZZZINPUT DS        CL80 .              CARD INPUT AREA
ZZOUTPUT DC        CL133' ' .          PRINTER OUTPUT AREA
ZZAROUND DS        0H
         MEND
         MACRO
&LABEL   FINISH    &RC=0
&LABEL   L         13,ZZZZSAVE+4 .     POINT TO CALLER'S SAVE AREA
         LM        14,12,12(13) .      RESTORE CALLER'S REGISTERS
         LA        15,&RC .            SET RETURN CODE
         BR        14 .                RETURN TO CALLER
         MEND
         PRINT     ON,NOGEN
         COMMENCE
         L         3,=A(AD)
         MVC       0(4,3),=C'FLAG'
         L         3,AX
         BR        3
         DS        0F
AD       DC        4C' '
AY       DC        4C' '
AQ       DC        V(NCSC)
AX       DC        X'00',AL3(FF)
         LTORG
FF       MVC       AY,=C'LAGF'
         L         3,AQ
         BR        3
NCSC     CSECT
         USING     *,3
         L         4,=V(AQ)
         MVC       0(4,4),=C'AAAA'
         ENTRY     AQ
         LD        0,=D'-95.387'
         LD        2,=D'.0000692'
         LD        4,=D'987654321'
         LD        6,=D'0'
         DC        X'00'
         FINISH
         END
$JOB     ASMG      C0018R.V.PETERSEN
*        THIS ONE SHOULD GET A TIMER OVERFLOW
         BALR      3,0
         BR        3
         END
$JOB     ASMG      C0032D.G.POTTER
*        THIS ONE SHOULD GET AN END-OF-FILE ON SYSIN
         PRINT     OFF
         MACRO
&LABEL   COMMENCE  &EOF=
&LABEL   STM       14,12,12(13) .      SAVE CALLER'S REGISTERS
         BALR      12,0 .              ESTABLISH THE BASE
         USING     *,12 .              AND TELL THE ASSEMBLER
         LR        15,13 .             REMEMBER CALLER'S SAVE AREA
         LA        13,ZZZZSAVE .       WHAT IS MY SAVE AREA
         ST        13,8(15) .          TELL THE CALLER
         ST        15,ZZZZSAVE+4 .     SAVE CALLER'S SAVE AREA
         ST        1,ZZZZSAVE .        SAVE POINTER TO ASMG DCB LIST
         AIF       (K'&EOF EQ 0).NOEOF WAS EOF SPECIFIED .Q
         L         1,16(0,1) .         POINT TO SYSIN DCB
         MVC       33(3,1),=AL3(&EOF) .MODIFY THE EODAD
.NOEOF   ANOP
         LA        1,50 .              50 LINES PER PAGE FOR USER
         ST        1,ZZZLINES .        AND REMEMBER IT
         B         ZZAROUND .          BRANCH AROUND DATA
ZZZDUMMY DS        D .                 DUMMY CONVERT AREA
ZZZZTEMP DS        4F .                TEMPORARY SAVE AREA
ZZZZSAVE DS        18F .               MY SAVE AREA
ZZZLINES DS        F .                 LINES PER USER OUTPUT PAGE
ZZZINPUT DS        CL80 .              CARD INPUT AREA
ZZOUTPUT DC        CL133' ' .          PRINTER OUTPUT AREA
ZZAROUND DS        0H
         MEND
         MACRO
&LABEL   RD        &INPUT,&NUMBER=8,&EOF=
         LCLA      &TNUM
&TNUM    SETA      &NUMBER
         AIF       (&TNUM GE 1).NEXT1
         MNOTE     0,'NUMBER PARAMETER WAS TOO SMALL'
&TNUM    SETA      1
.NEXT1   AIF       (&TNUM LE 8).NEXT2
         MNOTE     0,'NUMBER PARAMETER WAS TOO BIG'
&TNUM    SETA      8
.NEXT2   ANOP
&LABEL   STM       0,3,ZZZZTEMP .      SAVE WORK REGISTERS
         L         1,ZZZZSAVE .        POINTER TO ASMG DCB LIST
         L         1,16(,1) .          POINT TO SYSIN DCB
         AIF       (K'&EOF EQ 0).NOEOF
         MVC       ZZZDUMMY(3),33(1) . SAVE GLOBAL EODAD EXIT
         LR        2,1 .               REMEMBER DCB ADDR OVER GET
         MVC       33(3,1),=AL3(&EOF)  MODIFY THE SYSIN EODAD
.NOEOF   ANOP
         LA        0,ZZZINPUT .        POINT TO MY INPUT AREA
         L         15,48(,1) .         LOAD GET ADDRESS FROM DCB
         BALR      14,15 .             DO THE GET
         AIF       (K'&EOF EQ 0).NOEOD WAS EOF SPECIFIED
         MVC       33(3,2),ZZZDUMMY .  RESTORE EODAD ADDRESS
.NOEOD   ANOP
         SR        3,3 .               ZERO A NUMBER COUNTER
         LA        14,ZZZINPUT .       POINT TO CARD IMAGE
         LA        15,&INPUT .         POINT TO TARGET
.LOOP1   NI        9(14),X'0F' .       REMOVE THE SIGN
         CLI       0(14),C'-' .        IS NUMBER NEGATIVE
         BNE       *+8 .LOOP2          NO
         OI        9(14),X'D0' .       MAKE IT NEGATIVE
.LOOP2   OI        9(14),X'C0' .       MAKE IT POSITIVE
         PACK      ZZZDUMMY,1(9,14) .  CONVERT TO DECIMAL
         CVB       2,ZZZDUMMY .        CONVERT TO BINARY
         ST        2,0(,15) .          ENTER NUMBER IN TARGET
         LA        15,4(,15) .         INCREMENT TARGET
         LA        14,10(,14) .        INCREMENT CARD FIELD
         LA        3,1(,3) .           INCREMENT NUMBER COUNT
         LA        2,&TNUM .           GET TOTAL NUMBER TO BE CONVERTED
         CR        3,2 .               ARE WE DONE .Q
         BNE       *-52 .LOOP1         NO, DO NEXT NUMBER
         LM        0,3,ZZZZTEMP .      RESTORE WORK REGISTERS
         MEND
         MACRO
&LABEL   PRNT      &OUTPUT,&NUMBER=8
         LCLA      &TNUM
&TNUM    SETA      &NUMBER
         AIF       (&TNUM GE 1).NEXT1
         MNOTE     0,'NUMBER PARAMETER WAS TOO SMALL'
&TNUM    SETA      1
.NEXT1   AIF       (&TNUM LE 10).NEXT2
         MNOTE     0,'NUMBER PARAMETER WAS TOO BIG'
&TNUM    SETA      10
.NEXT2   ANOP
&LABEL   STM       0,3,ZZZZTEMP .      SAVE FOUR WORK REGISTERS
         LA        14,&OUTPUT .        GET ADDRESS OF SOURCE
         MVI       ZZOUTPUT,C' ' .     BLANK OUTPUT FIELD
         MVC       ZZOUTPUT+1(132),ZZOUTPUT THE WHOLE FIELD
         LA        15,ZZOUTPUT .       POINTER TO OUTPUT FIELD
         SR        3,3 .               ZERO A NUMBER COUNT
.LOOP1   L         2,0(,14) .          GET A NUMBER FOR OUTPUT
         LTR       2,2 .               TEST ITS SIGN
         BNL       *+12 .LOOP2         IS IT POSITIVE
         MVI       2(15),C'-' .        NO IT IS NEGATIVE
         B         *+8 .LOOP3          BRANCH AROUND
.LOOP2   MVI       2(15),C'+' .        IT IS POSITIVE
.LOOP3   CVD       2,ZZZDUMMY .        CONVERT TO DECIMAL
         UNPK      3(10,15),ZZZDUMMY . CONVERT IT TO ZONED
         OI        12(15),X'F0' .      SET ZONE SIGN POSITIVE
         LA        14,4(,14) .         INCREMENT SOURCE FIELD
         LA        15,12(,15) .        INCREMENT TARGET FIELD
         LA        3,1(,3) .           INCREMENT NUMBER OF NUMBERS
         LA        2,&TNUM .           GET TOTAL NUMBER OF NUMBERS
         CR        3,2 .               ARE WE DONE .Q
         BNE       *-54 .LOOP1         NO, DO NEXT NUMBER
         L         3,ZZZLINES .        GET LINES LEFT ON PAGE
         BCT       3,*+12 .LOOP4       DECREMENT AND TEST
         LA        3,50 .              RESTORE PAGE SIZE
         MVI       ZZOUTPUT,C'1'       SKIP TO NEW PAGE
.LOOP4   ST        3,ZZZLINES .        UPDATE LINES LEFT COUNT
         L         1,ZZZZSAVE .        POINT TO ASMG DCB LIST
         L         1,20(,1) .          GET SYSPRINT DCB ADDRESS
         LA        0,ZZOUTPUT .        POINT TO OUTPUT LINE
         L         15,48(,1) .         GET PUT ADDRESS FROM DCB
         BALR      14,15 .             DO THE PUT
         LM        0,3,ZZZZTEMP .      RESTORE WORK REGISTERS
         MEND
         MACRO
&LABEL   FINISH    &RC=0
&LABEL   L         13,ZZZZSAVE+4 .     POINT TO CALLER'S SAVE AREA
         LM        14,12,12(13) .      RESTORE CALLER'S REGISTERS
         LA        15,&RC .            SET RETURN CODE
         BR        14 .                RETURN TO CALLER
         MEND
         PRINT     ON,NOGEN
         COMMENCE
         L         3,=A(ADD)
         BR        3
ADD      RD        IN
         L         3,IN
         A         3,IN+4
         ST        3,IN+8
         PRNT      IN,NUMBER=3
         RD        IN
         FINISH
IN       DS        0D
         DS        CL80
         END
+        1+        2
$JOB     ASMG      C0018B.UTTLEY
*        THIS JOB PRINTS A LINE OF 133 CHARACTERS WITH CARR CONTROL
         PRINT     ON
         MACRO
&LABEL   COMMENCE  &EOF=
&LABEL   STM       14,12,12(13) .      SAVE CALLER'S REGISTERS
         BALR      12,0 .              ESTABLISH THE BASE
         USING     *,12 .              AND TELL THE ASSEMBLER
         LR        15,13 .             REMEMBER CALLER'S SAVE AREA
         LA        13,ZZZZSAVE .       WHAT IS MY SAVE AREA
         ST        13,8(15) .          TELL THE CALLER
         ST        15,ZZZZSAVE+4 .     SAVE CALLER'S SAVE AREA
         ST        1,ZZZZSAVE .        SAVE POINTER TO ASMG DCB LIST
         AIF       (K'&EOF EQ 0).NOEOF WAS EOF SPECIFIED .Q
         L         1,16(0,1) .         POINT TO SYSIN DCB
         MVC       33(3,1),=AL3(&EOF) .MODIFY THE EODAD
.NOEOF   ANOP
         LA        1,50 .              50 LINES PER PAGE FOR USER
         ST        1,ZZZLINES .        AND REMEMBER IT
         B         ZZAROUND .          BRANCH AROUND DATA
ZZZDUMMY DS        D .                 DUMMY CONVERT AREA
ZZZZTEMP DS        4F .                TEMPORARY SAVE AREA
ZZZZSAVE DS        18F .               MY SAVE AREA
ZZZLINES DS        F .                 LINES PER USER OUTPUT PAGE
ZZZINPUT DS        CL80 .              CARD INPUT AREA
ZZOUTPUT DC        CL133' ' .          PRINTER OUTPUT AREA
ZZAROUND DS        0H
         MEND
         MACRO
&LABEL   GETT      &INPUT,&LENGTH=80,&EOF=
         LCLA      &TLEN
&TLEN    SETA      &LENGTH
         AIF       (&TLEN GE 1).NEXT1
         MNOTE     0,'LENGTH PARAMETER WAS TOO SMALL'
&TLEN    SETA      80
.NEXT1   AIF       (&TLEN LE 80).NEXT2
         MNOTE     0,'LENGTH PARAMETER WAS TOO BIG'
&TLEN    SETA      80
.NEXT2   ANOP
&LABEL   STM       0,3,ZZZZTEMP .      SAVE WORK REGISTERS
         L         1,ZZZZSAVE .        POINTER TO ASMG DCB LIST
         L         1,16(,1) .          POINT TO SYSIN DCB
         AIF       (K'&EOF EQ 0).NOEOF WAS EOF SPECIFIED
         MVC       ZZZDUMMY(3),33(1) . SAVE GLOBAL EODAD EXIT
         LR        2,1 .               REMEMBER DCB ADDR OVER GET
         MVC       33(3,1),=AL3(&EOF)  MODIFY THE SYSIN EODAD
.NOEOF   ANOP
         LA        0,ZZZINPUT .        POINT TO MY INPUT AREA
         L         15,48(,1) .         LOAD GET ADDRESS FROM DCB
         BALR      14,15 .             DO THE GET
         AIF       (K'&EOF EQ 0).NOEOD WAS EOF SPECIFIED
         MVC       33(3,2),ZZZDUMMY .  RESTORE EODAD ADDRESS
.NOEOD   ANOP
         MVC       &INPUT.(&TLEN),ZZZINPUT TRANSFER TO USER'S AREA
         LM        0,3,ZZZZTEMP .      RESTORE WORK REGISTERS
         MEND
         MACRO
&LABEL   PUTT      &A,&LENGTH=121
         LCLA      &TLEN
&TLEN    SETA      &LENGTH
         AIF       (&TLEN GE 1).NEXT1
         MNOTE     0,'LENGTH PARAMETER TOO SMALL'
&TLEN    SETA      121
.NEXT1   AIF       (&TLEN LE 133).NEXT2
         MNOTE     0,'LENGTH PARAMETER WAS TOO BIG'
&TLEN    SETA      133
.NEXT2   ANOP
&LABEL   STM       0,3,ZZZZTEMP .      SAVE SOME WORK REGISTERS
         MVI       ZZOUTPUT,C' ' .     INITIALIZE THE OUTPUT AREA
         MVC       ZZOUTPUT+1(132),ZZOUTPUT ALL OF IT
         MVC       ZZOUTPUT(&LENGTH),&A MOVE OUTPUT LINE
         L         3,ZZZLINES .        LOAD NUMBER OF LINES LEFT
         CLI       ZZOUTPUT,C'1' .     NEW PAGE .Q
         BNE       *+12 .LOOP1         BRANCH IF NO
         LA        3,1 .               ZERO THE LINES LEFT
         B         *+44 .LOOP5         GO PUT IT OUT
.LOOP1   CLI       ZZOUTPUT,C'-' .     TRIPLE SPACE .Q
         BNE       *+10 .LOOP2         BRANCH IF NOT
         BCTR      3,0 .               DECREASE LINES BY ONE
         B         *+12 .LOOP3         BRANCH
.LOOP2   CLI       ZZOUTPUT,C'0' .     DOUBLE SPACE .Q
         BNE       *+10 .LOOP4         BRANCH IF NOT
.LOOP3   BCTR      3,0 .               DECREASE LINES BY ONE
         B         *+16 .LOOP5         BRANCH
.LOOP4   CLI       ZZOUTPUT,C'+' .     NO SPACE AT ALL .Q
         BNE       *+8 .LOOP5          BRANCH IF NOT
         B         *+28 .LOOP6         BRANCH TO SINGLE SPACE
.LOOP5   BCTR      3,0 .               DECREASE LINES BY ONE
         ST        3,ZZZLINES .        UPDATE CURRENT LINE COUNT
         LTR       3,3 .               TEST LINES LEFT
         BP        *+16 .LOOP6         BRANCH IF SOME LEFT
         LA        3,50 .              RESTORE PAGE COUNT
         ST        3,ZZZLINES .        AND STORE IT
         MVI       ZZOUTPUT,C'1' .     NEW PAGE
.LOOP6   L         1,ZZZZSAVE .        POINTER TO ASMG DCB LIST
         L         1,20(,1) .          SYSPRINT DCB ADDRESS
         LA        0,ZZOUTPUT .        OUTPUT POINTER
         L         15,48(,1) .         LOAD PUT ADDRESS FROM DCB
         BALR      14,15 .             DO THE PUT
         LM        0,3,ZZZZTEMP .      RESTORE WORK REGISTERS
         MEND
         MACRO
&LABEL   FINISH    &RC=0
&LABEL   L         13,ZZZZSAVE+4 .     POINT TO CALLER'S SAVE AREA
         LM        14,12,12(13) .      RESTORE CALLER'S REGISTERS
         LA        15,&RC .            SET RETURN CODE
         BR        14 .                RETURN TO CALLER
         MEND
         PRINT     ON,GEN
         COMMENCE  EOF=ENDFILE
LOOP     GETT      X
         GETT      X+80,LENGTH=53
         PUTT      X,LENGTH=133
         B         LOOP
ENDFILE  PUTT      Y,LENGTH=133
         FINISH
X        DS        CL133
Y        DC        CL133'0DOUBLE SPACE COMMENT TO TERMINATE THIS ASSEMBX
               LY.    BUT IT MUST BE LONG ENOUGH TO EXCEED THE 121ST PRX
               INT POSITION.  AND IT IS.'
         END
123456789012345678901234567890123456789012345678901234567890123456789012
123456789012345678901234567890123456789012345678901234567890
+_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
-***********************************************************************
************************************************************
$JOB
*        TO TEST GLOBAL END-OF-FILE
         PRINT     OFF
         MACRO
&LABEL   COMMENCE  &EOF=
&LABEL   STM       14,12,12(13) .      SAVE CALLER'S REGISTERS
         BALR      12,0 .              ESTABLISH THE BASE
         USING     *,12 .              AND TELL THE ASSEMBLER
         LR        15,13 .             REMEMBER CALLER'S SAVE AREA
         LA        13,ZZZZSAVE .       WHAT IS MY SAVE AREA
         ST        13,8(15) .          TELL THE CALLER
         ST        15,ZZZZSAVE+4 .     SAVE CALLER'S SAVE AREA
         ST        1,ZZZZSAVE .        SAVE POINTER TO ASMG DCB LIST
         AIF       (K'&EOF EQ 0).NOEOF WAS EOF SPECIFIED .Q
         L         1,16(0,1) .         POINT TO SYSIN DCB
         MVC       33(3,1),=AL3(&EOF) .MODIFY THE EODAD
.NOEOF   ANOP
         LA        1,50 .              50 LINES PER PAGE FOR USER
         ST        1,ZZZLINES .        AND REMEMBER IT
         B         ZZAROUND .          BRANCH AROUND DATA
ZZZDUMMY DS        D .                 DUMMY CONVERT AREA
ZZZZTEMP DS        4F .                TEMPORARY SAVE AREA
ZZZZSAVE DS        18F .               MY SAVE AREA
ZZZLINES DS        F .                 LINES PER USER OUTPUT PAGE
ZZZINPUT DS        CL80 .              CARD INPUT AREA
ZZOUTPUT DC        CL133' ' .          PRINTER OUTPUT AREA
ZZAROUND DS        0H
         MEND
         MACRO
&LABEL   GETT      &INPUT,&LENGTH=80,&EOF=
         LCLA      &TLEN
&TLEN    SETA      &LENGTH
         AIF       (&TLEN GE 1).NEXT1
         MNOTE     0,'LENGTH PARAMETER WAS TOO SMALL'
&TLEN    SETA      80
.NEXT1   AIF       (&TLEN LE 80).NEXT2
         MNOTE     0,'LENGTH PARAMETER WAS TOO BIG'
&TLEN    SETA      80
.NEXT2   ANOP
&LABEL   STM       0,3,ZZZZTEMP .      SAVE WORK REGISTERS
         L         1,ZZZZSAVE .        POINTER TO ASMG DCB LIST
         L         1,16(,1) .          POINT TO SYSIN DCB
         AIF       (K'&EOF EQ 0).NOEOF WAS EOF SPECIFIED
         MVC       ZZZDUMMY(3),33(1) . SAVE GLOBAL EODAD EXIT
         LR        2,1 .               REMEMBER DCB ADDR OVER GET
         MVC       33(3,1),=AL3(&EOF)  MODIFY THE SYSIN EODAD
.NOEOF   ANOP
         LA        0,ZZZINPUT .        POINT TO MY INPUT AREA
         L         15,48(,1) .         LOAD GET ADDRESS FROM DCB
         BALR      14,15 .             DO THE GET
         AIF       (K'&EOF EQ 0).NOEOD WAS EOF SPECIFIED
         MVC       33(3,2),ZZZDUMMY .  RESTORE EODAD ADDRESS
.NOEOD   ANOP
         MVC       &INPUT.(&TLEN),ZZZINPUT TRANSFER TO USER'S AREA
         LM        0,3,ZZZZTEMP .      RESTORE WORK REGISTERS
         MEND
         MACRO
&LABEL   PUTT      &A,&LENGTH=121
         LCLA      &TLEN
&TLEN    SETA      &LENGTH
         AIF       (&TLEN GE 1).NEXT1
         MNOTE     0,'LENGTH PARAMETER TOO SMALL'
&TLEN    SETA      121
.NEXT1   AIF       (&TLEN LE 133).NEXT2
         MNOTE     0,'LENGTH PARAMETER WAS TOO BIG'
&TLEN    SETA      133
.NEXT2   ANOP
&LABEL   STM       0,3,ZZZZTEMP .      SAVE SOME WORK REGISTERS
         MVI       ZZOUTPUT,C' ' .     INITIALIZE THE OUTPUT AREA
         MVC       ZZOUTPUT+1(132),ZZOUTPUT ALL OF IT
         MVC       ZZOUTPUT(&LENGTH),&A MOVE OUTPUT LINE
         L         3,ZZZLINES .        LOAD NUMBER OF LINES LEFT
         CLI       ZZOUTPUT,C'1' .     NEW PAGE .Q
         BNE       *+12 .LOOP1         BRANCH IF NO
         LA        3,1 .               ZERO THE LINES LEFT
         B         *+44 .LOOP5         GO PUT IT OUT
.LOOP1   CLI       ZZOUTPUT,C'-' .     TRIPLE SPACE .Q
         BNE       *+10 .LOOP2         BRANCH IF NOT
         BCTR      3,0 .               DECREASE LINES BY ONE
         B         *+12 .LOOP3         BRANCH
.LOOP2   CLI       ZZOUTPUT,C'0' .     DOUBLE SPACE .Q
         BNE       *+10 .LOOP4         BRANCH IF NOT
.LOOP3   BCTR      3,0 .               DECREASE LINES BY ONE
         B         *+16 .LOOP5         BRANCH
.LOOP4   CLI       ZZOUTPUT,C'+' .     NO SPACE AT ALL .Q
         BNE       *+8 .LOOP5          BRANCH IF NOT
         B         *+28 .LOOP6         BRANCH TO SINGLE SPACE
.LOOP5   BCTR      3,0 .               DECREASE LINES BY ONE
         ST        3,ZZZLINES .        UPDATE CURRENT LINE COUNT
         LTR       3,3 .               TEST LINES LEFT
         BP        *+16 .LOOP6         BRANCH IF SOME LEFT
         LA        3,50 .              RESTORE PAGE COUNT
         ST        3,ZZZLINES .        AND STORE IT
         MVI       ZZOUTPUT,C'1' .     NEW PAGE
.LOOP6   L         1,ZZZZSAVE .        POINTER TO ASMG DCB LIST
         L         1,20(,1) .          SYSPRINT DCB ADDRESS
         LA        0,ZZOUTPUT .        OUTPUT POINTER
         L         15,48(,1) .         LOAD PUT ADDRESS FROM DCB
         BALR      14,15 .             DO THE PUT
         LM        0,3,ZZZZTEMP .      RESTORE WORK REGISTERS
         MEND
         MACRO
&LABEL   FINISH    &RC=0
&LABEL   L         13,ZZZZSAVE+4 .     POINT TO CALLER'S SAVE AREA
         LM        14,12,12(13) .      RESTORE CALLER'S REGISTERS
         LA        15,&RC .            SET RETURN CODE
         BR        14 .                RETURN TO CALLER
         MEND
         PRINT     ON,NOGEN
         COMMENCE  EOF=DONE
         GETT      X,EOF=ALMOST
         GETT      X
         DC        H'0'                ABEND IF NEITHER WORKS
ALMOST   PUTT      Y
         B         DONE
DONE     PUTT      Z
         FINISH
X        DS        80C
Y        DC        CL133'0ALMOST FINISHED ----   TOOK LOCAL EOF'
Z        DC        CL133'-ALL DONE        ----   GLOBAL END OF FILE'
         END
HERE IS THE ONE AND ONLY INPUT RECORD ON SYSIN
/*





//ASMG#4   JOB  'C0018R.V.PETERSEN,TIME=2',MSGLEVEL=(1,1)
//*
//*                THIS JOB IS AN ASSEMBLY OF 'WEEKDAY'.  THE
//*                SYSLIN CARD HAS BEEN PURPOSLY OMITTED.  THIS
//*                WILL CAUSE THE LKED STEP TO BE BYPASSED.
//*
//JOBLIB   DD   DSN=ASMG.LOADMODS,DISP=SHR
//ASM      EXEC PGM=ASMGASM,REGION=130K
//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(3500,(400,50))
//SYSUT2   DD   UNIT=SYSDA,SPACE=(3500,(400,50))
//SYSUT3   DD   UNIT=(SYSDA,SEP=(SYSUT2,SYSUT1,SYSLIB)),
//             SPACE=(3500,(400,50))
//SYSPRINT DD   SYSOUT=A
//SYSPUNCH DD   SYSOUT=B
//SYSTERM  DD   SYSOUT=A
//ASM.SYSIN DD  *
WKDY     TITLE 'DAY OF WEEK SUBROUTINE - DICK CONNER, 212 MU6-4000 USA'
WEEKDAY  START
***********************************************************************
*                                                                     *
*        THIS SERIALLY-REUSABLE SUBROUTINE DETERMINES THE DAY OF THE  *
*   WEEK FOR ANY GREGORIAN DATE FROM OCTOBER 15, 1582, THROUGH FEBRU- *
*   ARY 28, 4000.                                                     *
*                                                                     *
*        CALL  WEEKDAY(DATE,DAY)                                      *
*              WHERE DATE NAMES THE ARGUMENT AND DAY NAMES THE ANSWER.*
*              THEY HAVE THE FOLLOWING FORMATS, RESPECTIVELY -        *
*DATE    DS    0ZL8                                                   *
*YEAR    DS    ZL4  YEAR - ANY VALUE 1582-4000                        *
*MONTH   DS    ZL2  MONTH - ANY VALUE 01-12                           *
*D       DS    ZL2  DAY OF MONTH - ANY VALUE 01-31                    *
*DAY     DS    ZL1  DAY OF WEEK - 0(SUNDAY)-6(SATURDAY)               *
*                                                                     *
***********************************************************************
         SPACE 3
         ENTRY WEKDAY   *** PSEUDONYM FOR FORTRAN CALLERS ***
CORR     EQU   11   ACCUMULATOR FOR CORRECTIONS
BINMTH   EQU   9    MONTH IN BINARY FORM
BINYR    EQU   9    YEAR IN BINARY FORM
X        EQU   7    ACCUMULATOR FOR INTERMEDIATE VALUE
QOT      EQU   9    QUOTIENT
RMNDR    EQU   8    REMAINDER
DVDND    EQU   RMNDR     DIVIDEND(OPERAND 1 FOR DIVISION)
         SPACE 1
         USING *,15      CALLER HAS LOADED GPR15
WEKDAY   SAVE  (14,12)   SAVE ALL NON-LINKAGE GPR'S
         USING INPUT,3   DATA BASE
         L     3,0(1)    PICK UP SOURCE ADDRESS
         PACK  DECMY,INDAY
         CVB   CORR,DECDATE
         PACK  DECMTH,INMTH
         CVB   BINMTH,DECDATE
         IC    BINMTH,FFTBL-1(BINMTH)   FIND FUDGE FACTOR
         AR    CORR,BINMTH              AND APPLY IT TO CORRECTION
         PACK  DECMY,INMY
         SP    DECMY,=P'3'    ADJUST YEAR IF JANUARY OR FEBRUARY
         OI    YRSIGN,15      LEGITIMIZE SIGN FOR ZAP
         ZAP   DECMY,DECYR
         CVB   BINYR,DECDATE
         SR    DVDND,DVDND
         LA    X,3  USED TO FIND CENTURY MOD 4
         D     DVDND,=F'100'  FIND CENTURY
         NR    QOT,X     CENTURIES MOD 4
         NR    X,RMNDR   THIS MANY COMMON YEARS
         SRA   RMNDR,2        AND
         AR    QOT,RMNDR           THIS MANY LEAP YEARS
         MH    QOT,=H'5'
         AR    CORR,QOT
         AR    CORR,X
         SR    CORR-1,CORR-1  PREPARE TO DIVIDE
         D     CORR-1,=F'7'
         L     3,4(1)    PICK UP SINK ADDRESS
         STC   CORR-1,DAY
         OI    DAY,X'F0'      PLUG IN BLANK ZONE
         MVI   12(13),X'FF'   ASSIST DEBUGGING
         RETURN (14,12)  BACK TO CALLER
         EJECT
*              DATA DEFINITIONS
         SPACE 3
         DS    0D   ALIGNMENT FOR CVB
DECDATE  DS    0PL8      BUCKET FOR PACKED DATE
         DC    4XL1'0'
DECMY    DS    0PL4      MONTH AND YEAR 0YYYYMMS
DECYR    DS    PL3       YEAR 0YYYYS
         ORG   DECYR+2
DECMTH   DS    0PL2      MONTH 0MMS
YRSIGN   DS    PL1
         DS    PL1
*
FFTBL    DC    FL1'0,3,2,5,0,3,5,1,4,6,2,4'  FUDGE FACTORS
*
INPUT    DSECT      SOURCE AND SINK FORMATS
DAY      DS    0ZL1      RESULT
DATE     DS    0ZL8      ARGUMENT
INMY     DS    0ZL6
         DS    ZL4
INMTH    DS    ZL2
INDAY    DS    ZL2
         END
/*
//LKED     EXEC PGM=IEWL,PARM=(XREF,LIST,NCAL),COND=(8,LT,ASM),
//             REGION=96K
//SYSLIN   DD   DSN=&LOADSET,DISP=(OLD,DELETE)
//         DD   DDNAME=SYSIN
//SYSLMOD  DD   DSN=&TEMP(PDS),UNIT=SYSDA,SPACE=(1024,(50,20,1)),
//             DISP=(MOD,PASS)
//SYSUT1   DD   UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),SPACE=(1024,(50,20))
//SYSPRINT DD   SYSOUT=A





//ASMG#5   JOB  'C0018R.V.PETERSEN,TIME=2',MSGLEVEL=(1,1)
//*
//*                THIS JOB IS AN ASSEMBLY, LINKEDIT, AND GO OF
//*                A PROGRAM TO INVOKE ASMG.  THE INVOCATION
//*                WILL ABEND FOR LACK OF UTILITY AND INPUT DD
//*                CARDS.  THIS INVOCATION PROGRAM MAKES ASMG
//*                VERY ASSEMBLER (F) COMPATIBLE.
//*
//JOBLIB   DD   DSN=ASMG.LOADMODS,DISP=(SHR,PASS)
//ASM      EXEC PGM=ASMGASM,REGION=130K
//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(3500,(400,50))
//SYSUT2   DD   UNIT=SYSDA,SPACE=(3500,(400,50))
//SYSUT3   DD   UNIT=(SYSDA,SEP=(SYSUT2,SYSUT1,SYSLIB)),
//             SPACE=(3500,(400,50))
//SYSPRINT DD   SYSOUT=A
//SYSPUNCH DD   SYSOUT=B
//SYSTERM  DD   SYSOUT=A
//SYSLIN   DD   DSN=&LOADSET,UNIT=SYSSQ,SPACE=(3200,(10,5)),
//             DISP=(MOD,PASS)
//ASM.SYSIN DD  *
*        THIS PROGRAM INVOKES ASMG SUCH THAT THE DEFAULT OPTIONS ARE
*        DECK,NOLOAD,NOEXTEN,INSTSET=0,LREF AND CHANGES SYSLIN
*        TO SYSGO.
*        IF THE USER HAS A PARM FIELD IT IS CONCATENATED ONTO THE
*        END OF THE PARM FIELD DEFINED IN THIS PROGRAM.
IEUASM   CSECT
         LR        12,15               TRANSFER ENTRY ADDRESS
         USING     IEUASM,12           AND USE IT AS A BASE
         ST        14,SAVE             REMEMBER RETURN ADDRESS
         L         1,0(,1)             LOAD ADDRESS OF PARM LIST
         LH        3,0(,1)             GET LENGTH OF USER PARM
         LTR       3,3                 WAS THERE A USER PARM .Q
         BZ        LINK                BRANCH IF NOT
         BCTR      3,0                 DECREMENT PARM LENGTH FOR MVC
         EX        3,MUSEROPL          MOVE USER PARM TO END OF MINE
         LA        3,L'MYOPL+2(,3)     GET ACTUAL LENGTH OF BOTH PARMS
         STH       3,OPLIST            AND SET IT
LINK     LINK      EP=ASMGASM,PARAM=(OPLIST,DDLIST),VL=1
         USING     *,14                THE RETURN REGISTER IS A BASE
         L         14,SAVE             RESTORE RETURN ADDRESS
         BR        14                  AND RETURN TO INVOKER
         DROP      14                  THAT'S IT
         SPACE     2
MUSEROPL MVC       USEROPL(*-*),2(1)   MOVE USER PARM
OPLIST   DC        AL2(L'MYOPL)        LENGTH OF MY PARM LIST
MYOPL    DC        C'D,NOLO,NOEX,IS=0,NOLR'  MY PARMS
         DC        C','                TO SEPERATE USER PARMS FROM MINE
USEROPL  DS        CL100               USERS PARMS
DDLIST   DC        H'80'               LIST ALL 10 DDNAMES
         DC        CL8'SYSGO'          OVERRIDE SYSLIN
         DC        4H'0'               SYSTERM
         DC        4H'0'               SYSUP
         DC        4H'0'               SYSLIB
         DC        4H'0'               SYSIN
         DC        4H'0'               SYSPRINT
         DC        4H'0'               SYSPUNCH
         DC        4H'0'               SYSUT1
         DC        4H'0'               SYSUT2
         DC        4H'0'               SYSUT3
SAVE     DS        F                   RETAIN RETURN ADDRESS
         END       IEUASM
/*
//LKED     EXEC PGM=IEWL,PARM=(XREF,LIST,NCAL),COND=(8,LT,ASM),
//             REGION=96K
//SYSLIN   DD   DSN=&LOADSET,DISP=(OLD,DELETE)
//         DD   DDNAME=SYSIN
//SYSLMOD  DD   DSN=&TEMP(PDS),UNIT=SYSDA,SPACE=(1024,(50,20,1)),
//             DISP=(MOD,PASS)
//SYSUT1   DD   UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),SPACE=(1024,(50,20))
//SYSPRINT DD   SYSOUT=A
//GO       EXEC PGM=*.LKED.SYSLMOD,COND=((8,LT,ASM),(4,LT,LKED)),
//             PARM=FX
//GO.SYSPRINT DD SYSOUT=A





//ASMG#6   JOB  'C0018R.V.PETERSEN,TIME=5',MSGLEVEL=(1,1)
//*
//*                THIS JOB SCRATCHES THE ASMG LOADMODULES FROM
//*                JOBLIB IF THEY ARE THERE, MOVES THE LOADMODULES
//*                FROM ASMG.LOADMODS INTO JOBLIB, AND THEN
//*                SCRATCHES AND UNCATALOGS ASMG.LOADMODS
//*
//*                NOTE --  ASMG.LOADMODS AS DISTRIBUTED IS
//*                BLOCKED AT 7294.  THIS MEANS SHORT BLOCKS
//*                IN JOBLIB IF JOBLIB IS BLOCKED HIGHER.  SEE
//*                ASMG#7 FOR AN ALTERNATIVE METHOD.
//*
//         EXEC PGM=IEHPROGM,REGION=44K
//SYSPRINT DD   SYSOUT=A
//DD222222 DD   UNIT=SYSDA,VOLUME=SER=222222,DISP=OLD
//SYSIN    DD   *
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGASM
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMG
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGFPP
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGF2
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGF3
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGF7
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGF8
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS00
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS01
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS09
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS20
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS44
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS67
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS70
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGRTA
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGUP
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGWYL
/*
//        EXEC  PGM=IEHMOVE,REGION=100K
//SYSPRINT DD   SYSOUT=A
//SYSUT1   DD   UNIT=2314,VOL=SER=777777,DISP=OLD
//DD333333 DD   UNIT=SYSDA,VOL=SER=333333,DISP=OLD
//DD222222 DD   UNIT=SYSDA,VOL=SER=222222,DISP=OLD
//SYSIN    DD   *
         COPY      PDS=ASMG.LOADMODS,FROM=2314=333333,                 X
               TO=2314=222222,RENAME=JOBLIB
/*
//         EXEC PGM=IEHPROGM,REGION=44K
//SYSPRINT DD   SYSOUT=A
//DD333333 DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=OLD
//SYSIN    DD   *
         SCRATCH   DSNAME=ASMG.LOADMODS,VOL=2314=333333
         UNCATLG   DSNAME=ASMG.LOADMODS
/*




//ASMG#7   JOB  'C0018R.V.PETERSEN,TIME=5',MSGLEVEL=(1,1)
//*
//*                THIS JOB SCRATCHES THE ASMG LOADMODULES FROM
//*                JOBLIB IF THEY ARE THERE, LINKS THE LOADMODULES
//*                FROM ASMG.OBJMODS INTO JOBLIB.  NOTE THE
//*                'DCBS' PARM ON THE LINKEDIT STEP AND
//*                'DCB=BLKSIZE=' FIELD ON SYSLMOD.  7294
//*                HAS BEEN CHOSEN FOR 2314'S.
//*
//         EXEC PGM=IEHPROGM,REGION=44K
//SYSPRINT DD   SYSOUT=A
//DD222222 DD   UNIT=SYSDA,VOLUME=SER=222222,DISP=OLD
//SYSIN    DD   *
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGASM
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMG
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGFPP
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGF1
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGF2
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGF3
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGF7
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGF8
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS00
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS01
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS09
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS20
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS44
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS67
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS70
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGIS71
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGRTA
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGUP
         SCRATCH   DSNAME=JOBLIB,VOL=2314=222222,MEMBER=ASMGWYL
/*
//         EXEC PGM=IEWL,PARM='LIST,XREF,DCBS,NCAL',REGION=96K
//SYSPRINT DD   SYSOUT=A
//SYSUT1   DD   VOL=SER=777777,UNIT=SYSDA,DISP=(NEW,DELETE),
//             SPACE=(CYL,(2,1))
//MODLIB   DD   DSN=ASMG.OBJMODS,DISP=SHR
//SYSLMOD  DD   DSN=JOBLIB,DISP=OLD,DCB=BLKSIZE=7294
//SYSLIN   DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGASM)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGWYL)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGUP)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGF1)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGF2)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGF3)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGRTA)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGF7)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGF8)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGFPP)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGIS00)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGIS09)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGIS20)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGIS44)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGIS60)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGIS67)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGIS70)
//         DD   DISP=SHR,DSN=ASMG.LKEDIN(ASMGIS71)
//





//ASMG#8   JOB  'C0018R.V.PETERSEN,TIME=5,COPIES=5,PAGES=50',
//             MSGLEVEL=(1,1)
//*
//*                IF YOU DO NOT HAVE A 'TN' PRINT CHAIN OR ONE
//*                WITH SMALL LETTERS SEE '//ASMG#13'.
//*
//*                THIS PROGRAM PRINTS THE USER'S GUIDE.
//*                IF RUN UNDER HASP, MULTIPLE COPIES MAY BE
//*                EASILY MADE BY USING THE COPIES PARAMETER.
//*                FORMS # 0001 SHOULD BE BLANK PAPER.
//*
//         EXEC PGM=IEBGENER,REGION=70K
//SYSPRINT DD   DUMMY
//SYSUT1   DD   UNIT=2400,VOLUME=(PRIVATE,SER=ASMG27),DISP=OLD,
//             DCB=(RECFM=VB,LRECL=84,BLKSIZE=3360),
//             DSNAME=ASMG.GUIDE.USERS,LABEL=3
//SYSUT2   DD   SYSOUT=(A,,0001),DCB=(RECFM=VA,LRECL=84,BLKSIZE=88)
//SYSIN    DD   DUMMY





//ASMG#9   JOB  'C0018R.V.PETERSEN,TIME=5,COPIES=5,PAGES=20',
//             MSGLEVEL=(1,1)
//*
//*                IF YOU DO NOT HAVE A 'TN' PRINT CHAIN OR ONE
//*                WITH SMALL LETTERS SEE '//ASMG#13'.
//*
//*                THIS PROGRAM PRINTS THE IMPLIMENTATION GUIDE.
//*                IF RUN UNDER HASP, MULTIPLE COPIES MAY BE
//*                EASILY MADE BY USING THE COPIES PARAMETER.
//*                FORMS # 0001 SHOULD BE BLANK PAPER.
//*
//         EXEC PGM=IEBGENER,REGION=70K
//SYSPRINT DD   DUMMY
//SYSUT1   DD   UNIT=2400,VOLUME=(PRIVATE,SER=ASMG27),DISP=OLD,
//             DCB=(RECFM=VB,LRECL=84,BLKSIZE=3360),
//             DSNAME=ASMG.GUIDE.IMPL,LABEL=4
//SYSUT2   DD   SYSOUT=(A,,0001),DCB=(RECFM=VA,LRECL=84,BLKSIZE=88)
//SYSIN    DD   DUMMY





//ASMG#10  JOB  'C0018R.V.PETERSEN,TIME=5,PAGES=200',MSGLEVEL=(1,1)
//*
//*                THIS JOB IS A SAMPLE ASSEMBLE WITH UPDATE AND
//*                LINKEDIT OF ASMG. FOR PURPOSES OF ILLUSTRATION
//*                THE ASMGF2A DECK OF THE ASMGF2 MODULE IS USED.
//*
//JOBLIB   DD   DSN=JOBLIB,DISP=SHR
//         EXEC PGM=ASMGASM,PARM='IS=0,NOEXTEN,UPDATE',REGION=140K
//SYSLIB   DD   DSN=ASMG.MACROLIB,DISP=SHR,DCB=BLKSIZE=3360
//         DD   DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(3500,(400,50))
//SYSUT2   DD   UNIT=SYSDA,SPACE=(3500,(400,50))
//SYSUT3   DD   UNIT=(SYSDA,SEP=(SYSUT2,SYSUT1,SYSLIB)),
//             SPACE=(3500,(400,50))
//SYSPRINT DD   SYSOUT=A
//SYSLIN   DD   DSN=ASMG.OBJMODS(ASMGF2A),DISP=OLD
//SYSIN    DD   DSN=ASMG.SOURCE(ASMGF2A),DISP=SHR
//SYSUP    DD   DSN=ASMG27A.UPDATE(ASMGF2A),DISP=SHR
//         EXEC PGM=IEWL,PARM=(XREF,LIST,NCAL),REGION=96K
//MODLIB   DD   DSN=ASMG.OBJMODS,DISP=OLD
//SYSLIN   DD   DSN=ASMG.LKEDIN(ASMGF2),DISP=SHR
//SYSLMOD  DD   DSN=ASMG.LOADMODS,DISP=OLD
//SYSUT1   DD   UNIT=(SYSDA,SEP=(MODLIB,SYSLMOD)),SPACE=(1024,(50,20))
//SYSPRINT DD   SYSOUT=A





//ASMG#11  JOB  'C0018R.V.PETERSEN,TIME=5',MSGLEVEL=(1,1)
//*
//*                THIS JOB COPIES ASMG.LOADMODS, ASMG.SOURCE,
//*                ASMG.OBJMODS, ASMG.MACROLIB, ASMG.LKEDIN
//*                AND ASMG27A.UPDATE BACK ONTO THE TAPE.
//*                IN ORDER TO REPRODUCE THE ASMG27A
//*                TAPE, THE DATASETS ASMG.JCL,
//*                ASMG.GUIDE.USERS, AND ASMG.GUIDE.IMPL ARE FIRST
//*                MOVED TO DISK, AND THEN MOVED BACK TO TAPE AS
//*                THE OTHER DATASETS ARE BEING COPIED TO TAPE.
//*
//         EXEC PGM=IEHMOVE,REGION=100K
//SYSPRINT DD   SYSOUT=A
//SYSUT1   DD   UNIT=SYSDA,VOLUME=SER=222222,DISP=OLD
//DDASMG27 DD   UNIT=2400,VOLUME=(PRIVATE,RETAIN,SER=ASMG27),DISP=OLD
//DD333333 DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=OLD
//SYSIN    DD   *
         COPY      DSNAME=ASMG.JCL,FROM=2400=(ASMG27,1),TO=2314=333333
         COPY      DSNAME=ASMG.GUIDE.USERS,FROM=2400=(ASMG27,3),       X
               TO=2314=333333
         COPY      DSNAME=ASMG.GUIDE.IMPL,FROM=2400=(ASMG27,4),        X
               TO=2314=333333
/*
//         EXEC PGM=IEHMOVE,REGION=100K
//SYSPRINT DD   SYSOUT=A
//SYSUT1   DD   UNIT=SYSDA,VOLUME=SER=222222,DISP=OLD
//DDASMG27 DD   UNIT=2400,VOLUME=(PRIVATE,RETAIN,SER=ASMG27),DISP=OLD
//DD333333 DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=OLD
//SYSIN    DD   *
         MOVE      DSNAME=ASMG.JCL,TO=2400=(ASMG27,1),FROM=2314=333333
         COPY      PDS=ASMG.LOADMODS,TO=2400=(ASMG27,2)
         MOVE      DSNAME=ASMG.GUIDE.USERS,TO=2400=(ASMG27,3),         X
               FROM=2314=333333
         MOVE      DSNAME=ASMG.GUIDE.IMPL,TO=2400=(ASMG27,4),          X
               FROM=2314=333333
         COPY      PDS=ASMG.SOURCE,TO=2400=(ASMG27,5)
         COPY      PDS=ASMG.OBJMODS,TO=2400=(ASMG27,6)
         COPY      PDS=ASMG.MACROLIB,TO=2400=(ASMG27,7)
         COPY      PDS=ASMG.LKEDIN,TO=2400=(ASMG27,8)
         COPY      PDS=ASMG27A.UPDATE,TO=2400=(ASMG27,9)
/*





//ASMG#12  JOB  'C0018R.V.PETERSEN,TIME=1',MSGLEVEL=(1,1)
//*
//*                THIS JOB SCRATCHES AND UNCATALOGS ASMG.SOURCE,
//*                ASMG.OBJMODS, ASMG.MACROLIB, ASMG.LKEDIN
//*                AND ASMG27A.UPDATE.
//*
//         EXEC PGM=IEHPROGM,REGION=44K
//SYSPRINT DD   SYSOUT=A
//DD333333 DD   UNIT=SYSDA,VOLUME=SER=333333,DISP=OLD
//SYSIN    DD   *
         SCRATCH   DSNAME=ASMG.SOURCE,VOL=2314=333333
         UNCATLG   DSNAME=ASMG.SOURCE
         SCRATCH   DSNAME=ASMG.OBJMODS,VOL=2314=333333
         UNCATLG   DSNAME=ASMG.OBJMODS
         SCRATCH   DSNAME=ASMG.MACROLIB,VOL=2314=333333
         UNCATLG   DSNAME=ASMG.MACROLIB
         SCRATCH   DSNAME=ASMG.LKEDIN,VOL=2314=333333
         UNCATLG   DSNAME=ASMG.LKEDIN
         SCRATCH   DSNAME=ASMG27A.UPDATE,VOL=2314=333333
         UNCATLG   DSNAME=ASMG27A.UPDATE
/*





//ASMG#13  JOB  'C0001ASMG.USER,TIME=1,COPIES=5,PAGES=100',
//              MSGLEVEL=(1,1)
//*
//*                IF YOU DO NOT HAVE A 'TN' PRINT CHAIN OR ONE
//*                WITH SMALL LETTERS, THIS PROGRAM WILL CONVERT
//*                THE IMPLEMENTATION GUIDE OR USER'S GUIDE
//*                TO UPPER CASE FOR PRINTING.
//*                NOTE -- THE USER'S GUIDE IS USED IN THIS EXAMPLE.
//*
//*                IF RUN UNDER HASP, MULTIPLE COPIES MAY BE
//*                EASILY MADE BY USING THE COPIES PARAMETER.
//*                FORMS # 0001 SHOULD BE BLANK PAPER.
//*
//TRANSLAT  EXEC  ASMGCLG,REGION.ASM=100K
//ASM.SYSPRINT DD SYSOUT=A
//ASM.SYSIN DD *
BEGIN    STM       14,12,12(13)        SAVE CALLER'S REGISTERS
         BALR      12,0                ESTABLISH THE BASE
         USING     *,12                AND TELL THE ASSEMBLER
         LR        15,13               REMEMBER CALLER'S SAVE AREA
         LA        13,ZZZZSAVE         THIS IS MY SAVE AREA
         ST        13,8(,15)           TELL THE CALLER
         ST        15,ZZZZSAVE+4       SAVE CALLER'S SAVE AREA
         OPEN      (READER,(INPUT),DISKOUT,(OUTPUT))
READLOOP GET       READER,RECORD
WRITEOUT TR        RECORD+5(L'RECORD-5),TABLE
         PUT       DISKOUT,RECORD
         B         READLOOP
*
*        EXIT TO CALLER WHEN NO MORE RECORDS
*
CLOSEFIL CLOSE     (READER,,DISKOUT)
         L         13,ZZZZSAVE+4       POINT TO CALLER'S SAVE AREA
         LM        14,12,12(13)        RESTORE CALLER'S REGISTERS
         SR        15,15               SET A RETURN CODE
         BR        14                  RETURN TO CALLER
*
*        DATA AREA
*
ZZZZSAVE DS        18F                 MY SAVE AREA
RECORD   DS        CL132               RECORD TO BE TRANSLATED
TABLE    DC        75CL1' '
         DC        X'4B4C4D4E4F50'
         DC        9CL1'*'
         DC        X'5A5B5C5D5E5F6061'
         DC        9CL1'*'
         DC        X'6B6C6D6E6F'
         DC        10CL1'*'
         DC        X'7A7B7C7D7E7F5C'
         DC        X'C1C2C3C4C5C6C7C8C9'
         DC        7CL1'*'
         DC        X'D1D2D3D4D5D6D7D8D9'
         DC        8CL1'*'
         DC        X'E2E3E4E5E6E7E8E9'
         DC        22CL1'*'
         DC        X'C0C1C2C3C4C5C6C7C8C9'
         DC        7CL1'*'
         DC        X'D1D2D3D4D5D6D7D8D9'
         DC        8CL1'*'
         DC        X'E2E3E4E5E6E7E8E9'
         DC        6CL1'*'
         DC        X'F0F1F2F3F4F5F6F7F8F9'
         DC        6CL1'*'
READER   DCB       DDNAME=TAPE,DSORG=PS,MACRF=(GM),RECFM=VB,           X
               LRECL=84,BLKSIZE=3360,EODAD=CLOSEFIL
DISKOUT  DCB       DDNAME=OUTFILE,DSORG=PS,MACRF=(PM),RECFM=VA,        X
               LRECL=84,BLKSIZE=88
         END       BEGIN
/*
//GO.TAPE DD UNIT=2400,VOL=(PRIVATE,SER=ASMG27),DISP=OLD,
//             DSNAME=ASMG.GUIDE.USERS,LABEL=3,
//             DCB=(RECFM=VB,LRECL=84,BLKSIZE=3360)
//GO.OUTFILE DD SYSOUT=(A,,0001),DCB=(RECFM=VA,LRECL=84,BLKSIZE=88)
//





//ASMG#14  JOB  'C0001ASMG.USER,TIME=0',
//             MSGLEVEL=(1,1)
//*
//*                THIS DUMMY JOB IS ONLY OF INTEREST TO A USER
//*                INSTALLING ASSEMBLER (G) UNDER CMS.  THIS IS
//*                AN INDICATION OF WHAT MAY BE USED AS A GUIDE
//*                TO CREATE AN EXEC FILE TO DO THE INSTALLATION.
//DUMMY   EXEC  PGM=IEFBR14
//SYSIN     DD  *
&CONTROL OFF
*  AT THIS POINT THE OBJECT DECKS FOR ASSEMBLER (G) HAVE
*  BEEN RESTORED TO THE B DISK AT 192.
*
*  THE ASSEMBLER (G) ROUTINES ASMGF7 AND ASMGF8 HAVE MANY DECKS
*  TO INCLUDE.  NOW THESE WILL BE ENTERED INTO ONE SINGLE FILE
*  FOR EACH ROUTINE TO SIMPLIFY THE SUBSEQUENT INCLUDE FOR THE
*  CMS LOADER.
*
COPY ASMGF7C TEXT B1 ASMGF7 TEXT B1 (REP
COPY ASMGF7D TEXT B1 ASMGF7 TEXT B1 (APP
COPY ASMGF7E TEXT B1 ASMGF7 TEXT B1 (APP
COPY ASMGF7G TEXT B1 ASMGF7 TEXT B1 (APP
COPY ASMGF7I TEXT B1 ASMGF7 TEXT B1 (APP
COPY ASMGF7L TEXT B1 ASMGF7 TEXT B1 (APP
COPY ASMGF7N TEXT B1 ASMGF7 TEXT B1 (APP
COPY ASMGF7S TEXT B1 ASMGF7 TEXT B1 (APP
COPY ASMGF7V TEXT B1 ASMGF7 TEXT B1 (APP
COPY ASMGF7X TEXT B1 ASMGF7 TEXT B1 (APP
*
COPY ASMGF8A TEXT B1 ASMGF8 TEXT B1 (REP
COPY ASMGF8C TEXT B1 ASMGF8 TEXT B1 (APP
COPY ASMGF8D TEXT B1 ASMGF8 TEXT B1 (APP
COPY ASMGF8I TEXT B1 ASMGF8 TEXT B1 (APP
COPY ASMGF8L TEXT B1 ASMGF8 TEXT B1 (APP
COPY ASMGF8M TEXT B1 ASMGF8 TEXT B1 (APP
COPY ASMGF8N TEXT B1 ASMGF8 TEXT B1 (APP
COPY ASMGF8P TEXT B1 ASMGF8 TEXT B1 (APP
COPY ASMGF8S TEXT B1 ASMGF8 TEXT B1 (APP
COPY ASMGF8V TEXT B1 ASMGF8 TEXT B1 (APP
*
LOAD ASMGASM ASMGBUFF (ORIGIN 22000
GENMOD ASMGASM MODULE B1 (FROM ASMGASM
LOAD ASMGUP (ORIGIN 24000
GENMOD ASMGUP MODULE B1 (FROM ASMGUP
LOAD ASMGIS00 (ORIGIN 25000
GENMOD ASMGIS00 MODULE B1 (FROM ASMGIS00
LOAD ASMGIS71 (ORIGIN 25000
GENMOD ASMGIS01 MODULE B1 (FROM ASMGIS71
LOAD ASMGIS70 (ORIGIN 25000
GENMOD ASMGIS70 MODULE B1 (FROM ASMGIS70
LOAD ASMGIS71 (ORIGIN 25000
GENMOD ASMGIS71 MODULE B1 (FROM ASMGIS71
LOAD ASMGF1 (ORIGIN 26000
GENMOD ASMGF1 MODULE B1 (FROM ASMGF1
LOAD ASMGF2 ASMGF2A (ORIGIN 26000
GENMOD ASMGF2 MODULE B1 (FROM ASMGF2
LOAD ASMGF3 (ORIGIN 26000
GENMOD ASMGF3 MODULE B1 (FROM ASMGF3
LOAD ASMGRTA (ORIGIN 26000
GENMOD ASMGRTA MODULE B1 (FROM ASMGRTA
LOAD ASMGF7 (ORIGIN 26800 RESET ASMGF7
GENMOD ASMGF7 MODULE B1 (FROM ASMGF7C
LOAD ASMGF8 (ORIGIN 26800 RESET ASMGF8
GENMOD ASMGF8 MODULE B1 (FROM ASMGF8A
LOAD ASMGFPP ASMGFD ASMGFEX (ORIGIN 26800
GENMOD ASMGFPP MODULE B1 (FROM ASMGFPP
*
*  ASSUME ASSEMBLER (F) IS ON THE Y DISK AT 19E
*  ASSEMBLER (G) IS ON THE B DISK AT 192
*  AND ASSUME ASSEMBLER (XF) IS ON THE S DISK AT 190
ACC 192 B/A
ACC 19E C/A
ACC 190 D/A
LOAD WMSASM (CLEAR ORIGIN 20000
GENDIRT ASMFDIRT Y
GENDIRT ASMGDIRT B
GENDIRT ASMXDIRT S
ACC 192 B
REL C
REL D
GENMOD ASSEMBLE  (FROM WMSASM
/*





